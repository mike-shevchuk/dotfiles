# üí° TMUX Project Manager (–°–µ—Å—ñ—ó —Ç–∞ –î–µ–º–æ–Ω–∏) –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
ts() {
    echo "--- [DEBUG: ts() START] ---"

    # 1. –®–ª—è—Ö–∏ –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è
    local project_dirs=(
        "$HOME/projects"
        "$HOME/dotfiles"
        "$HOME/work"
    )
    echo "DEBUG: Scanning directories: ${project_dirs[*]}"

    # 2. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≤–∏–±—ñ—Ä –∫–∞—Ç–∞–ª–æ–≥—É
    local project_list
    project_list=$(
        echo "."  # –î–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é —É –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–∑—ñ
        for dir in "${project_dirs[@]}"; do
             if [ -d "$dir" ]; then
                 find "$dir" -mindepth 1 -maxdepth 1 -type d
             fi
        done
    )
    
    # –ü–ï–†–ï–í–Ü–†–ö–ê: –ß–∏ fzf –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–∏—Å–æ–∫
    if [[ -z "$project_list" ]]; then
        echo "ERROR: Project list is empty. Check if directories exist or if fzf is working."
        return 1
    fi

    local target_dir
    target_dir=$(echo "$project_list" | fzf --prompt="Select project directory (ts): " --border --height=40%)

    if [[ -z "$target_dir" ]]; then
        echo "DEBUG: Selection cancelled by user."
        echo "--- [DEBUG: ts() END] ---"
        return 0
    fi
    
    # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    if [[ "$target_dir" == "." ]]; then
        target_dir="$PWD"
    fi

    echo "DEBUG: Target directory selected: $target_dir"

    local session_name
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ–º'—è –∫–∞—Ç–∞–ª–æ–≥—É —è–∫ –Ω–∞–∑–≤—É —Å–µ—Å—ñ—ó
    session_name=$(basename "$target_dir" | tr . _)
    echo "DEBUG: Calculated session name: $session_name"

    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—ó
    if tmux has-session -t "$session_name" 2>/dev/null; then
        # –°–ï–°–Ü–Ø –Ü–°–ù–£–Ñ
        echo "INFO: Session '$session_name' found. Attaching..."
        tmux switch-client -t "$session_name"
        echo "--- [DEBUG: ts() END] ---"
        return 0
    fi
    
    echo "INFO: Session '$session_name' does NOT exist."

    # 4. –°–ï–°–Ü–Ø –ù–ï –Ü–°–ù–£–Ñ: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    local setup_script="$target_dir/.tmux_setup.sh"
    echo "DEBUG: Checking for setup script: $setup_script"

    if [ -f "$setup_script" ]; then
        # –°–¶–ï–ù–ê–†–Ü–ô: –§–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ. –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç.
        echo "INFO: Setup script found. Creating session and running setup."

        # 5a. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å–µ—Å—ñ—ó
        tmux new-session -ds "$session_name" -c "$target_dir" -n 'Shell'
        echo "DEBUG: New detached session created: $session_name"

        # 5b. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        tmux send-keys -t "$session_name:0" "zsh $setup_script" C-m
        echo "DEBUG: Sent command 'zsh $setup_script' to window 0."
        
        # 5c. –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
        tmux attach-session -t "$session_name"
        echo "INFO: Attached to session '$session_name'."
        echo "--- [DEBUG: ts() END] ---"
        return 0
    else
        # –°–¶–ï–ù–ê–†–Ü–ô: –§–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–ï –°–¢–í–û–†–Æ–Ñ–ú–û —Å–µ—Å—ñ—é.
        echo "WARNING: No existing session and no .tmux_setup.sh found."
        echo "INFO: Aborting session creation."
        echo "--- [DEBUG: ts() END] ---"
        return 1
    fi
}



fjob() {
    local selected
    selected=$(jobs -l | fzf --prompt="Select Job: " --height=20% --layout=reverse --border --no-hscroll)
    if [[ -n "$selected" ]]; then
        local job_id=$(echo "$selected" | awk '{print $1}' | tr -d '[]%')
        fg %"$job_id"
    fi
}
alias jf='fjob'
